name: ci
on:
  push:
    paths:
      - '.github/workflows/ci.yml'
      - 'src/**'
      - 'tests/**'
      - '.clang-format'
      - 'MANIFEST.in'
      - 'pyproject.toml'
      - 'setup.py'
  workflow_dispatch:

jobs:
  style:
    name: format C++ and lint Python
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - run: ./clang-format.bash check
      - run: pipx run hatch fmt --check
        if: success() || failure()

  coverage:
    needs: [style]
    name: check code coverage
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
      - run: |
          pip install -v .[cov]
          pytest -n logical
          gcovr --json-summary-pretty | tee coverage.json
          [ $(jq '.line_percent*10' coverage.json) -ge 950 ]
        env:
          CFLAGS: --coverage
      - uses: stellarhub/push-gist-action@v1
        with:
          token: ${{ secrets.PAT }}
          gist_id: 20ce6b322e80fe740f1ba6365fe7f110
          file_path: coverage.json
        if: github.ref_type == 'tag'

  build:
    needs: [style]
    strategy:
      matrix:
        os: [{name: 'macos-13', version: '13.0'}, {name: 'macos-14', version: '14.0'}, {name: 'ubuntu-24.04', version: ''}, {name: 'windows-2022', version: ''}]
    name: build on ${{ matrix.os.name }}
    runs-on: ${{ matrix.os.name }}
    steps:
      - uses: actions/checkout@v4
      - uses: pypa/cibuildwheel@v2.23.3
        env:
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.os.version }}
        with:
          output-dir: wheelhouse
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os.name }}-${{ strategy.job-index }}
          path: wheelhouse/*.whl

  release:
    if: github.ref_type == 'tag'
    needs: [coverage, build]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/pysorteddict
    permissions: write-all
    steps:
      - uses: actions/checkout@v4
      - run: pipx run build -s
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: dist/
      - run: |
          gh release create ${{ github.ref_name }} -t ${{ github.ref_name }} --generate-notes
          gh release upload ${{ github.ref_name }} dist/*
        env:
          GH_TOKEN: ${{ github.token }}
      - uses: pypa/gh-action-pypi-publish@release/v1
